_dir,"charclass.xxl" load as 'chclass;
'incl is { 'srcpath sys as 'sp; 
	["def.h","proto.h","accessors.h"] each { "#include \"",sp,"/",x,"\"\n" } 
};
'arity is {y~"y" any + 1};  // if the source mentions 'y' its arity 2! idiocy..
// write unary or binary function header, ex: VP xxlffi_myfuncname(VP x,VP y) { .. }
'funchdr is { 
	x str as 'lbl; y as 'code;
	code arity = 2 ifelse [("VP xxlffi_",lbl,"(VP x,VP y){"),("VP xxlffi_",lbl,"(VP x){")]
};
// write function body - header n code
'funcbody is { x funchdr y,
	"\n ",y,"\}\n\n"
};
'gensrc is { x as 'modn; y as 'funcs; 
	[]incl,
	(y key as 'k; y val as 'v; [k,v] >: funcbody)
	flat
};
'fnsafe {x split [] amend [{not in chclass.fnsafe},"_"] join ""};
'compile is { y as 'modulename; y as 'funcs;
	["/tmp/xxlffi-",(modulename fnsafe),".c"] 
		File.path as 'outfn;
	modulename gensrc funcs as 'code show;
	[outfn,code] show;
	code file.set outfn;
	'compshared from sys," ",outfn as 'cmd
	show
	// .file.set ([x,".c"] as 'cfn);
	// 'buildshared sys ,cfn shell show
};

['compile:compile]

/*
	example:
	"examples/ffi.xxl" load as 'ffi;
	"/tmp/mymodule" ffi.comp ['double:"x * y"]
*/



