#include <signal.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TESTITERS 1

// very crude auto-appending-printf macro
#define APF(sz,fmt,...) snprintf(s+strlen(s),sz-strlen(s),fmt,__VA_ARGS__);
#define ASSERT(cond,txt) ({ if (!(cond)) { printf("ASSERT: %s\n", txt); raise(SIGABRT); exit(1); } })
#define IFR(cond,thing) if((cond)) return thing
#define ITER(thing,n,body) ({ int _i;for(_i=0;_i<sizeof(thing);_i++) { typeof(*thing) _x; _x=thing[_i]; body; } })
#define ITERV(x,body) ({ int _i;for(_i=0;_i<x->n;_i++) { body; } })
#define ITER2(x,y,body) ({ \
	int _i; int _j; \
	if(x==NULL || y==NULL || x->n==0 || y->n==0) { \
	} else if(x->n > 1) { \
		for(_i=0;_i<x->n;_i++) { \
			if(y->n > 1) { \
				for (_j=0;_j<y->n;_j++) { \
					if(IS_i(x)&&IS_i(y)) { \
						int _x = EL(x,int,_i); \
						int _y = EL(y,int,_i); \
						printf("_x %d,_y %d\n", _x, _y); \
						body; \
					} \
				} \
			} \
		} \
	} \
})
#define P0(fmt,x) ({ typeof(x) xx=x; char* s=malloc(1024);snprintf(fmt,1024,xx); xx; })
#define DUMP(x) ({ char* s = reprA(x); printf("%s\n", s); free(s); })

/* functions ending in A allocate their return value; be sure to free() them */
#define TYD(name,type) typedef type name
TYD(I8,unsigned char); TYD(I32,int); TYD(I64,long long); 
TYD(type_t,I8); TYD(buf_t,I8*);

/* Structure for most values. 'st' and 'dyn' static and dynamic storage for data */
struct V { type_t t; I32 tag; I32 n; I32 cap; I32 itemsz; I32 sz; I32 rc; I8 alloc; buf_t next; union { I8 st[32]; buf_t dyn;};};
typedef struct V* VP; /* value pointer */

typedef VP (unaryFunc)(VP x);
typedef VP (binaryFunc)(VP x,VP y);
typedef char* (reprFunc)(VP x,char*s,size_t sz);

struct Proj0 { int type; union { unaryFunc* f1; binaryFunc* f2; }; VP left; VP right; };
typedef struct Proj0 Proj;

/* some prototypes */
VP xalloc(type_t t,I32 initn);
VP xrealloc(VP x,I32 newn);
char* repr0(VP x,char* s,size_t len);
char* reprA(VP x);
int _find(VP x,VP y);
VP tagname(I32 tag);
int tagnum(const char* name);
const char* sfromx(VP x);

#define BUF(v) ((buf_t)( (v)->alloc ? (v->dyn) : (buf_t)&((v)->st) ))
#define EL(v,type,n) (((type*)BUF(v))[n])
#define ELl(v,n) ((EL(v,VP,n)))
#define ELb(v,n) ELsz(v,1,n)
#define ELi(v,n) ((BUF(v))+((v->itemsz)*n))
#define ELsz(v,sz,n) ((BUF(v))+(sz*n))
#define SCALAR(v) ((v)->n==1)
#define LIST(v) ((v)->t==0)
#define LISTDICT(v) ((v)->t==0||IS_d(v))
#define ENLISTED(v) (LIST(v)&&(v)->n==1)
#define KEYS(v) (ELl(v,0))
#define VALS(v) (ELl(v,1))

struct type_info { type_t t; char c; int sz; char name[32]; reprFunc* repr; };
typedef struct type_info type_info_t;

/* global variables :( */
I64 ALLOCED=0,FREED=0;
VP TAGS=NULL;

#include "accessors.h"
/*
char* repr_1(VP x,char* s,size_t sz) {
	APF(sz,"[ unary func = %p ],",x);
	return s;
}
char* repr_2(VP x,char* s,size_t sz) {
	APF(sz,"[ binary func = %p ],",x);
	return s;
}
char* repr_p(VP x,char* s,size_t sz) {
	APF(sz,"[ projection = %p ],",x);
	return s;
}
*/
char* repr_t(VP x,char* s,size_t sz) {
	int i;int tag;
	APF(sz,"[ ",0);
	for(i=0;i<x->n;i++){
		tag = AS_t(x,i);
		APF(sz,"%d#%s",tag,sfromx(tagname(tag)));
		APF(sz,",",0);
		// repr0(*(EL(x,VP*,i)),s,sz);
	}
	APF(sz," ]",0);
	return s;
}
char* repr_l(VP x,char* s,size_t sz) {
	int i;VP a;
	APF(sz,"[ ",0);
	for(i=0;i<x->n;i++){
		a = ELl(x,i);
		APF(sz,"%d:",i);
		repr0(a,s,sz);
		APF(sz,", ",0);
		// repr0(*(EL(x,VP*,i)),s,sz);
	}
	APF(sz," ]",0);
	return s;
}
char* repr_d(VP x,char* s,size_t sz) {
	int i;
	VP k=KEYS(x),v=VALS(x);
	if (!k || !v) { APF(sz,"[null]",0); return s; }
	APF(sz,"[ keys (%d): ",k->t);
	repr0(k,s,sz);
	APF(sz," ],[ values (%d): ",v->t);
	repr0(v,s,sz);
	APF(sz," ]",0);
	return s;
}
#include "repr.h"
#include "types.h"

type_info_t typeinfo(type_t n) { ITER(TYPES,sizeof(TYPES),{ IFR(_x.t==n,_x); }); }
type_info_t typechar(char c) { ITER(TYPES,sizeof(TYPES),{ IFR(_x.c==c,_x); }); }
VP xalloc(type_t t,I32 initn) {
	VP a; int itemsz,sz; 
	initn = initn < 4 ? 4 : initn;
	itemsz = typeinfo(t).sz; sz=itemsz*initn;
	//printf("%d\n",sz);
	a = calloc(sizeof(struct V)+sz,1);
	ALLOCED += sizeof(struct V)+sz;
	a->t=t;a->tag=0;a->n=0;a->rc=1;a->cap=initn;a->sz=sz;a->itemsz=itemsz;
	return a;
}
VP xrealloc(VP x,I32 newn) {
	// printf("xrealloc %p %d\n",x,newn);
	if(newn>=x->cap) {
		buf_t newp; I32 newsz;
		newn = (newn < 10*1024) ? newn * 4 : newn * 1.25;
		newsz = newn * x->itemsz;
		if(x->alloc) {
			// printf("realloc %p %d %d %d\n", x->dyn, x->sz, newn, newsz);
			newp = realloc(x->dyn, newsz);
		} else {
			// printf("calloc %d %d %d\n", x->sz, newn, newsz);
			newp = calloc(newsz,1);
			memmove(newp,BUF(x),x->sz);
		}
		ALLOCED += newsz;
		// printf("realloc new ptr = %p\n", newp);
		if(newp==NULL) perror("realloc");
		x->dyn=newp;
		x->cap=newn;
		x->sz=newsz;
		x->alloc=1;
		// printf("post realloc\n"); DUMP(x);
	}
	return x;
}
VP xfree(VP x) {
	if(x==NULL)return x;
	//printf("xfree(%p)\n",x);
	x->rc--; 
	if(x->rc==0){
		if(LISTDICT(x))
			ITERV(x,xfree(ELl(x,_i)));
		FREED+=sizeof(struct V) + x->sz;
		//printf("free%p\n",x);free(x);
	} return x; }
VP xref(VP x) { x->rc++; return x; }
VP xfroms(const char* str) {  // character value from string - strlen helper
	size_t len = strlen(str)+1; type_info_t t = typechar('c');
	VP a = xalloc(t.t,len); memcpy(BUF(a),str,len); a->n=len; return a; }
const char* sfromx(VP x) { 
	if(x==NULL)return "null";
	return BUF(x); }
VP append_(VP x,buf_t buf,size_t nelem) {
	int newn;buf_t dest;
	newn = x->n+nelem;
	x=xrealloc(x,newn);
	dest = ELi(x,x->n);
	memmove(dest,buf,x->itemsz * nelem);
	x->n=newn;
}
VP append(VP x,VP y) { // append all items of y to x. if x is a general list, append pointer to y, and increase refcount.
	// printf("append %p %p\n",x,y); DUMP(x); DUMP(y);
	ASSERT(LISTDICT(x) || (x->t==y->t), "append(): x must be list, or types must match");
	if(IS_d(x)) {
		ASSERT(y->n % 2 == 0, "append to a dict with [`key;`value]");
		VP k=KEYS(x),v=VALS(x),y1,y2; int i;
		y1=ELl(y,0);
		y2=ELl(y,1);
		// tough decisions
		if(k==NULL) { // create dict
			if(0 && SCALAR(y1)) {
				k=xalloc(y1->t, 4);
			} else {
				k=xl0();
			}
			v=xl0();
			xref(k);xref(v);
			EL(x,VP,0)=k;
			EL(x,VP,1)=v;
			// printf("dict kv %p %p\n", k, v);
			DUMP(k);
			printf("NEW DICT VALUES\n");
			DUMP(v);
			i=-1;
		} else 
			i=_find(k,y1);
		if(i==-1) {
			EL(x,VP,0)=append(k,y1);
			EL(x,VP,1)=append(v,y2);
		} else {
			xref(y2);
			ELl(v,i)=y2;
		}
		return x;
	}
	if(LIST(x)) { 
		// printf("append %p to list %p\n", y, x); DUMP(x);
		x=xrealloc(x,x->n++);
		xref(y);
		EL(x,VP,x->n-1)=y;
		// printf("afterward:\n"); DUMP(x);
	} else {
		buf_t dest;
		dest = BUF(x) + (x->n*x->itemsz);
		x=xrealloc(x,x->n + y->n);
		memmove(ELsz(x,x->itemsz,x->n),BUF(y),y->sz);
		x->n+=y->n;
	}
	return x;
}
VP appendfree(VP x,VP y) {
	append(x,y); xfree(y); return x;
}
VP upsert(VP x,VP y) {
	if(_find(x,y)==-1) append(x,y); return x;
}
int _upsertidx(VP x,VP y) {
	int idx = _find(x,y);
	if(idx>-1) return idx;
	append(x,y); return x->n-1;
}
VP slice_(VP x,int i) {
	VP res = xalloc(x->t,x->n-i);
	memcpy(ELi(res,0),ELi(x,i),i*x->itemsz);
	return res;
}
VP replaceleft(VP x,int n,VP replace) { // replace first i values with just 'replace'
	int i;
	ASSERT(LIST(x),"replaceleft arg must be list");
	if(n>1) {
		for(i=0;i<n;i++) xfree(ELl(x,i));
		memmove(ELi(x,1),ELi(x,n),x->itemsz*(x->n-n));
	}
	EL(x,VP,0)=replace;
	x->n=x->n-i;
	return x;
}
inline int _equalm(VP x,int xi,VP y,int yi) {
	// printf("comparing %p to %p\n", ELi(x,xi), ELi(y,yi));
	if(memcmp(ELi(x,xi),ELi(y,yi),x->itemsz)==0) return 1;
	else return 0;
}	
int _equal(VP x,VP y) {
	/*
	 * printf("_equal");
	DUMP(x);
	DUMP(y);
	*/
	if(LIST(x) && SCALAR(x))  // if the list is a container for one item, we probably want to match the inner one
		return _equal(ELl(x,0),y);
	if(x->n != y->n) return 0; // XXX handle comparison tolerance and type conversion
	if(LIST(x) && LIST(y)) { ITERV(x,{ IFR(_equal(ELl(x,_i),ELl(y,_i))==0, 0); }); }
	ITERV(x,{ IFR(memcmp(ELb(x,_i),ELb(y,_i),x->itemsz)!=0,0); });
	return 1;
}
int _findbuf(VP x,buf_t y) {
	if(LISTDICT(x)) { ITERV(x,{ 
		IFR(_findbuf(ELl(x,_i),y)!=-1,_i);
	}); } else {
		ITERV(x,{ IFR(memcmp(ELi(x,_i),y,x->itemsz)==0,_i); });
	}
	return -1;
}
int _find(VP x,VP y) {
	ASSERT(LIST(x) || (x->t==y->t && y->n==1), "_find(): x must be list, or types must match with right scalar");
	/*
	 * printf("find %p %p\n",x,y);
	DUMP(x); DUMP(y);*/
	if(LISTDICT(x)) { ITERV(x,{ 
		VP xx;
		xx=ELl(x,_i);
		if(xx!=NULL) 
			IFR(_equal(xx,y)==1,_i);
	}); }
	else {
		ITERV(x,{ IFR(memcmp(ELi(x,_i),ELi(y,0),x->itemsz)==0,_i); });
	}
	return -1;
}
VP find(VP x,VP y) {
	return xi(_find(x,y));
}
int _contains(VP x,VP y) {
	return _find(x,y)==-1 ? 0 : 1;
}
VP contains(VP x,VP y) {
	return xi(_contains(x,y));
}
inline VP times(VP x,VP y) {
	VP r = xalloc(x->t, x->n);
	ITER2(x,y,{ append(r,xi(_x*_y)); });
	return r;
}
inline VP each(VP x,void* func()) {
}
char* repr0(VP x,char* s,size_t sz) {
	type_info_t t;
	if(x==NULL) { APF(sz,"[null]",0); return s; }
	t=typeinfo(x->t);
	APF(sz,"[%p %s tag=%d#%s itemsz=%d n=%d rc=%d] ",x,t.name,
		x->tag,(x->tag!=0 ? sfromx(tagname(x->tag)) : ""),
		x->itemsz,x->n,x->rc);
	if(t.repr) (*(t.repr)(x,s,sz));
	return s;
}
char* reprA(VP x) {
	#define BS 1024
	char* s = calloc(1,BS);
	s = repr0(x,s,BS);
	APF(BS,"\n",0);
	return s;
}
VP apply(VP x,VP y) {
	VP res=NULL;int i;
	printf("apply\n");
	DUMP(x);
	DUMP(y);
	if(IS_d(x)) {
		VP k=KEYS(x), v=VALS(x);
		if(k==NULL || v==NULL) return NULL;
		res=xi0();
		ITERV(y,{ 
			int idx;
			printf("searching %d\n",_i);
			if(LIST(y))
				idx = _find(k,ELl(y,_i));
			else
				idx = _findbuf(k,ELi(y,_i));
			if(idx>-1) {
				printf("found at idx %d\n", idx);
				append(res,xi(idx));
			}
		});
		return apply(v,res);
	}
	if(IS_p(x)) { 
		// if its dyadic
		   // if we have one arg, add y, and call - return result
			 // if we have no args, set y as left, and return x
		// if its monadic
			// if we have one arg already, call x[left], and then apply result with y
			// i think this is right..
	}
	if(IS_1(x)) {
		unaryFunc* f;
		f=AS_1(x,0);
		return (*f)(y);
	}
	if(IS_i(y)) {
		// index a value with an integer 
		if(y->n==1 && LIST(x)) {
			// special case for generic lists:
			// if you index with one item, return just that item
			// generally you would receive a list back
			// this may potentially become painful later on 
			i = AS_i(y,0);
			VP tmp = ELl(x,i);
			xref(tmp);
			return tmp;
		} else {
			res=xalloc(x->t,y->n);
			ITERV(y,{ 
				i=AS_i(y,_i);
				// printf("looking up #%d idx %d\n",_i,i);
				append_(res,ELi(x,i),1);
			});
			return res;
		}
	}
}
VP mktags() {
	int i; VP tags=xl0();
	ITER(TYPES,sizeof(TYPES),{ upsert(tags,xfroms(_x.name)); });
	return tags;
}
VP entags(VP x,const char* name) {
	x->tag=tagnum(name);
	return x;
}
VP tagname(I32 tag) {
	VP res;
	// printf("tagname(%d)\n", tag);
	// DUMP(TAGS);
	if(TAGS==NULL) TAGS=xl0();
	if(tag>=TAGS->n) return xfroms("unknown");
	res = ELl(TAGS,tag);
	// printf("tagname res\n");
	// DUMP(res);
	return res;
}
const char* tagnames(I32 tag) {
	return sfromx(tagname(tag));
}
int tagnum(const char* name) {
	int i;VP s;
	if(TAGS==NULL) { TAGS=xl0(); upsert(TAGS,xfroms("")); printf("new tags\n"); DUMP(TAGS); }
	s=xfroms(name);
	i=_upsertidx(TAGS,s);
	ASSERT(strncmp(sfromx(tagname(i)),name,strlen(name))==0,"tagnum name busted");
	// printf("tagnum %s -> %d\n",name,i);
	xfree(s);
	// DUMP(TAGS);
	return i;
}
VP mkctx() {
	VP a=xl0(), tags = mktags();
	append(a,tags);
	a->tag=tagnum("ctx");
}
VP ctx_resolve(VP ctx) {

}
VP match(VP obj,VP pat) {
	int anyof, exact, greedy;
	int i, j, found, mtype, pati, obji;
	VP acc,tmp;
	anyof=tagnum("anyof"); exact=tagnum("exact"); greedy=tagnum("greedy");

	mtype=pat->tag;
	printf("mtype = %d %s\n",mtype,tagnames(mtype));
	printf("match %d %d\n", obj->n, pat->n);
	DUMP(obj);
	DUMP(pat);
	if(pat->tag==exact &&
		 pat->n!=obj->n)
		return xi0();
	acc = xi0();
	pati = 0; obji = 0;
	while(pati < pat->n && obji < obj->n) {
		printf("%s inner loop pat %d of %d, obj %d of %d\n", tagnames(mtype), pati, pat->n, obji, obj->n);
		found=0;
		if(LIST(pat)&&LIST(obj)) {
			printf("doing submatch\n");
			tmp=match(ELl(obj,obji),ELl(pat,pati));
			if(tmp->n>0) { found=1; append_(acc,&obji,1); }
		} else if(_equalm(pat,pati,obj,obji)) {
				printf("items appear to match %d %d\n", pati, obji);
				found=1; append_(acc,&obji,1);
			}
		printf("found = %d\n", found);
		if (found) {
			obji++;
			if (mtype==greedy) 
				;
			else
				pati++;
		}
		if (!found) {
			if (mtype!=anyof) {
				printf("advancing pati");
				obji++;
			}
			pati++;
		}
	}
	printf("final pati %d obji %d\n", pati, obji);
	return acc;
}
VP matchexec(VP obj,VP pats) {
	int i,j;VP res,res2,sel;
	ASSERT(LIST(pats)&&pats->n%2==0,"pats should be a list of [pat1,fn1,pat2,fn2..]");
	printf("matchexec\n");
	DUMP(obj);
	DUMP(pats);
	for(i=0;i<pats->n;i+=2) {
		printf("matchexec %d\n", i);
		res=match(obj,ELl(pats,i));
		printf("matchexec match\n");
		DUMP(res);
		if(res->n) {
			res2=apply(ELl(pats,i+1),apply(obj,res));
			obj=replaceleft(obj,res->n,res2);
		}
	}		
}
/*
VP match(VP obj,VP pat) {
	int tE,tS,tAO,tG,found,pati,obji,type; 
	VP acc,oo,pp,tmp;
	
	if(ENLISTED(obj))
		obj=ELl(obj,0);
	if(ENLISTED(pat))
		pat=ELl(pat,0);
	printf("match\n");
	DUMP(obj);
	DUMP(pat);
	tE=tagnum("exact"); tS=tagnum("start"); tAO=tagnum("anyof"); tG=tagnum("greedy");
 	type=(pat->tag==0)?tE : pat->tag;
	printf("type %d %s\n", type, sfromx(tagname(type)));
	acc=xi0();
	if(type==tE && obj->n != pat->n) {
		printf("sizes dont match; returning..\n");
		return acc;
	}
	if(obj->t != pat->t) {
		printf("types don't match, returning..\n");
		return acc;
	}
	pati = obji = 0;
	printf("size = %d, %d\n", pat->n, obj->n);
	while(pati < pat->n && obji < obj->n) {
		found=0;
		printf("examining pat type %s/obj %d/%d\n", tagname(type), pati, obji);
		pp=ELl(pat,pati);
		oo=ELl(obj,obji);
		DUMP(pp);
		DUMP(oo);

		
		if(pp->tag) {
			if(pp->tag==tAO) {
				tmp=match(oo,pp);
				if(tmp->n) found=1;
			} else {
				// this is an exact tag match
				if(pp->tag != oo->tag) {
					printf("tag mismtach on pat/obj %d / %d\n", pati, obji);
					goto next;
				}
			}
		}

		if(!_equalm(pat,pati,obj,obji)) {
			printf("equalm failed\n");
			goto next;
		}

		next:

		printf("found %d @ %d/%d\n",found, pati, obji);

		if(!found) {
			if(type==tE) // a skip during an exact match: donezo
				return acc;
			// if we are doing an any of match, try the next rule on the same item
			if(!type==tAO)
				pati++;
			obji++;
		} else {
			append_(acc,&obji,1);
			// greedy patterns keep trying the same pattern on more object items
			if(type!=tG) {
				pati++;
			}
			obji++;
		}
	}

	printf("done with loop %d %d\n", pati, obji);

	if(type==tE && acc->n != obj->n) 
		return xi0();
	else
		return acc;

*/
	/*
	for(i=0;i<pat->n;i++) {
		oo=ELl(obj,i); pp=ELl(pat,i);
		if(pp->t != oo->t) {
			printf("type mismatch on pat item #%d\n", i); DUMP(oo); DUMP(pp);
			return acc;
		}
		if(pp->tag != 0) {
			if (pp->tag=tAO) {
				// we need something like contains that works for individual values
				// from another VP record, without having to build them from scratch
				int found;
				for(j=0;j<pp->n;j++)
					if(_findbuf(obj,ELi(pp,j))) {
						found=1;
						break;
					}
				if(!found) return acc;
			} else if(pp->tag != oo->tag) {
				printf("type mismatch on pat item #%d\n", i); DUMP(oo); DUMP(pp);
				return acc;
			}
		}
		append_(acc,&i,1);
	}
	return acc;
	*/

	/*
	if(type==tagnum("start")) {
		acc=xi0();
		DUMP(obj);
		DUMP(pat);
		if(obj->t!=pat->t)
			return acc;
		ITERV(pat,{
			if(_i >= obj->n) return acc;
			printf("pat part %d\n", _i);
			oo=ELl(obj,_i);
			pp=ELl(pat,_i);
			printf("oo,pp\n");
			DUMP(oo);
			DUMP(pp);
			if(LIST(pp)) {
				tmp=match(oo,pp);
				if(tmp->n == 0) return acc;
			} else if(pp->t != oo->t)
				return acc;
			if(pp->tag!=0&&pp->tag!=oo->tag)
				return acc;
			append_(acc,&_i,1);
		});
		return acc;
	}
	if(type==tagnum("exact")) {
		acc=match(obj,pat);
		if(acc->n==obj->n) return acc;
		else return xi0();
	}
}
	*/
VP eval0(VP ctx,VP code,int level) {
	int i,j; 
	VP k,v,cc,kk,vv,matchres,sel,rep;
	printf("eval0 level %d\n",level);
	DUMP(ctx);
	DUMP(code);
	ASSERT(LIST(code),"eval0 list for now");
	k=KEYS(ctx);v=VALS(ctx);
	ASSERT(k!=NULL&&v!=NULL,"eval0: empty ctx");

	for(i=0;i<code->n;i++) { // XXX use wrapper function for descent 
		cc=ELl(code,i);
		if (LIST(cc)) 
			eval0(ctx,cc,level+1);
		// try to match each key in ctx
		for (j=0;j<k->n;j++) {
			kk = ELl(k,j);
			printf("eval0 inner %p\n", kk);DUMP(kk);
			matchres = match(cc,kk);
			if(matchres->n==kk->n) {
				printf("got match\n");DUMP(kk);
				sel = apply(cc,matchres);
				printf("sel\n");DUMP(sel);
				vv=ELl(v,j);
				if(IS_1(vv)) 
					rep=apply(vv,ELl(sel,1));
				printf("rep\n");DUMP(rep);
				EL(code,VP,i)=rep;
			}
		}
	}
	return code;
}
VP til(VP x) {
	VP acc;int i;
	printf("TIL!!!!\n");
	DUMP(x);
	ASSERT(IS_i(x),"til: arg must be int");
	acc = xisz(AS_i(x,0));
	for(i=0;i<AS_i(x,0);i++) {
		append_(acc,&i,1);
	}
	return acc;
}
VP plus(VP x,VP y) {
}
VP eval(VP code) {
	VP ctx = xd0();VP tmp;
	ASSERT(LIST(code),"eval(): code must be list");
	tmp=xl0();
	tmp=append(tmp,xt(tagnum("til")));
	tmp=append(tmp,xi0());
	ASSERT(tmp->n==2,"eval tmp n");
	ctx=append(ctx,xln(2, tmp, x1(&til) ));
	tmp=xl0();
	tmp=append(tmp,xi0());
	tmp=append(tmp,xt(tagnum("+")));
	tmp=append(tmp,xi0());
	ctx=append(ctx,xln(2, tmp, x2(&plus) ));
	return eval0(ctx,code,0);
}
VP evalstr(const char* str) {
	VP pats,acc,t1;size_t l=strlen(str);int i;
	acc=xlsz(l);
	for(i=0;i<l;i++)
		append(acc,xc(str[i]));
	DUMP(acc);
	pats=xl0();
	/* identifiers */
	append(pats,entags(
		xln(1,
			entags(xfroms("abcdefghjijklmnoprstuvwxyz"),"anyof")
		),"greedy"));
	append(pats,x1(&til));
	t1=matchexec(acc,pats);
	printf("evalstr result\n");
	DUMP(t1);
	exit(1);
}
void test_basics() {
	#include "test-basics.h"
}
void test_eval() {
	/*
	VP code,tmp1,tmp2,tmp3;
	printf("test_eval\n");
	code=entags(xl0(),"code");
	ASSERT(code->tag==tagnum("code"),"entags 1");
	tmp1=xln(2,
		xt(tagnum("til")),
		xi(100)
	);
	tmp1->tag=tagnum("value");
	append(code,tmp1);
	eval(code);
	*/
	evalstr("til 1024");
}
void tests() {
	test_basics();
	test_eval();
	printf("alloced = %llu, freed = %llu\n", ALLOCED, FREED);
}
int main(void) {
	VP code;
	tests();
}
