#include <limits.h>
#include <signal.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TESTITERS 1

#ifndef DEBUG
#define DEBUG 0
#endif

// very crude auto-appending-printf macro
#define APF(sz,fmt,...) snprintf(s+strlen(s),sz-strlen(s),fmt,__VA_ARGS__);
#define ASSERT(cond,txt) ({ if (!(cond)) { printf("ASSERT: %s\n", txt); raise(SIGABRT); exit(1); } })
#define IFR(cond,thing) if((cond)) return thing
#define ITER(thing,n,body) ({ int _i;for(_i=0;_i<sizeof(thing);_i++) { typeof(*thing) _x; _x=thing[_i]; body; } })
#define ITERV(x,body) ({ int _i;for(_i=0;_i<x->n;_i++) { body; } })
#define ITER2(x,y,body) ({ \
	int _i; int _j; \
	if(x==NULL || y==NULL || x->n==0 || y->n==0) { \
	} else if(x->n > 1) { \
		for(_i=0;_i<x->n;_i++) { \
			if(y->n > 1) { \
				for (_j=0;_j<y->n;_j++) { \
					if(IS_i(x)&&IS_i(y)) { \
						int _x = EL(x,int,_i); \
						int _y = EL(y,int,_i); \
						PF("_x %d,_y %d\n", _x, _y); \
						body; \
					} \
				} \
			} \
		} \
	} \
})
#define P0(fmt,x) ({ typeof(x) xx=x; char* s=malloc(1024);snprintf(fmt,1024,xx); xx; })
#define PF(...) (DEBUG && printf(__VA_ARGS__))
#define MEMPF(...) (DEBUG && MEM_W && printf(__VA_ARGS__))

#if DEBUG == 1
	#define DUMP(x) ({ char* s = reprA(x); PF("%s\n", s); free(s); })
#else
	#define DUMP(x) ({})
#endif

/* functions ending in A allocate their return value; be sure to free() them */
#define TYD(name,type) typedef type name
TYD(I8,unsigned char); TYD(I32,int); TYD(I64,__int64_t); TYD(I128,__int128_t);
TYD(type_t,I8); TYD(buf_t,I8*);

/* Structure for most values. 'st' and 'dyn' static and dynamic storage for data */
struct V { type_t t; I32 tag; I32 n; I32 cap; I32 itemsz; I32 sz; I32 rc; I8 alloc; buf_t next; union { I8 st[32]; buf_t dyn;};};
typedef struct V* VP; /* value pointer */

typedef VP (unaryFunc)(VP x);
typedef VP (binaryFunc)(VP x,VP y);
typedef char* (reprFunc)(VP x,char*s,size_t sz);

struct Proj0 { int type; union { unaryFunc* f1; binaryFunc* f2; }; VP left; VP right; };
typedef struct Proj0 Proj;

/* some prototypes */
VP xalloc(type_t t,I32 initn);
VP xrealloc(VP x,I32 newn);
VP xfree(VP x);
char* repr0(VP x,char* s,size_t len);
char* reprA(VP x);
int _find(VP x,VP y);
VP entag(VP x,VP t);
VP append(VP x,VP y);
VP entags(VP x,const char* name);
VP tagname(I32 tag);
VP tagwraps(const char* name, VP x);
int _tagnum(VP name);
int _tagnums(const char* name);
const char* sfromx(VP x);
VP match(VP obj,VP pat);

#define BUF(v) ((buf_t)( (v)->alloc ? (v->dyn) : (buf_t)&((v)->st) ))
#define EL(v,type,n) (((type*)BUF(v))[n])
#define ELl(v,n) ((EL(v,VP,n)))
#define ELb(v,n) ELsz(v,1,n)
#define ELi(v,n) ((BUF(v))+((v->itemsz)*n))
#define ELsz(v,sz,n) ((BUF(v))+(sz*n))
#define EXC(type,lbl,x,y) return tagwraps("exception",xln(4,type,lbl,x,y));
#define SCALAR(v) ((v)->n==1)
#define LIST(v) ((v)->t==0)
#define LISTDICT(v) ((v)->t==0||IS_d(v))
#define DICT(v) (IS_d(v))
#define ENLISTED(v) (LIST(v)&&(v)->n==1)
#define KEYS(v) (ELl(v,0))
#define VALS(v) (ELl(v,1))
#define Ti(n) (_tagnums("##n"))
#define Tt(n) (xt(_tagnums("##n")))

struct type_info { type_t t; char c; int sz; char name[32]; reprFunc* repr; };
typedef struct type_info type_info_t;

/* global variables :( */
#define GOBBLERSZ 1024
static VP MEM_RECENT[GOBBLERSZ] = {0};
static I8 MEM_W=0; //watching memory?
#define N_MEM_PTRS 1024
static VP MEM_PTRS[N_MEM_PTRS]={0};
static I32 MEM_ALLOC_SZ=0,MEM_FREED_SZ=0;
static I32 MEM_ALLOCS=0, MEM_REALLOCS=0, MEM_FREES=0, MEM_GOBBLES=0;
static VP TAGS=NULL;

#include "accessors.h"
/*
char* repr_1(VP x,char* s,size_t sz) {
	APF(sz,"[ unary func = %p ],",x);
	return s;
}
char* repr_2(VP x,char* s,size_t sz) {
	APF(sz,"[ binary func = %p ],",x);
	return s;
}
char* repr_p(VP x,char* s,size_t sz) {
	APF(sz,"[ projection = %p ],",x);
	return s;
}
*/
char* repr_t(VP x,char* s,size_t sz) {
	int i;int tag;
	APF(sz,"[ ",0);
	for(i=0;i<x->n;i++){
		tag = AS_t(x,i);
		APF(sz,"%d#%s",tag,sfromx(tagname(tag)));
		APF(sz,",",0);
		// repr0(*(EL(x,VP*,i)),s,sz);
	}
	APF(sz," ]",0);
	return s;
}
char* repr_l(VP x,char* s,size_t sz) {
	int i;VP a;
	APF(sz,"[ ",0);
	for(i=0;i<x->n;i++){
		a = ELl(x,i);
		APF(sz,"%d:",i);
		repr0(a,s,sz);
		APF(sz,", ",0);
		// repr0(*(EL(x,VP*,i)),s,sz);
	}
	APF(sz," ]",0);
	return s;
}
char* repr_x(VP x,char* s,size_t sz) {
	int i;VP a;
	APF(sz,"[ ",0);
	for(i=0;i<x->n;i++){
		a = ELl(x,i);
		APF(sz,"%d:",i);
		repr0(a,s,sz);
		APF(sz,", ",0);
		// repr0(*(EL(x,VP*,i)),s,sz);
	}
	APF(sz," ]",0);
	return s;
}
char* repr_d(VP x,char* s,size_t sz) {
	int i;
	VP k=KEYS(x),v=VALS(x);
	if (!k || !v) { APF(sz,"[null]",0); return s; }
	APF(sz,"[ keys (%d): ",k->t);
	repr0(k,s,sz);
	APF(sz," ],[ values (%d): ",v->t);
	repr0(v,s,sz);
	APF(sz," ]",0);
	return s;
}
#include "repr.h"
#include "types.h"

type_info_t typeinfo(type_t n) { ITER(TYPES,sizeof(TYPES),{ IFR(_x.t==n,_x); }); }
type_info_t typechar(char c) { ITER(TYPES,sizeof(TYPES),{ IFR(_x.c==c,_x); }); }
VP xalloc(type_t t,I32 initn) {
	VP a; int g,i,itemsz,sz; 
	initn = initn < 4 ? 4 : initn;
	itemsz = typeinfo(t).sz; sz=itemsz*initn;
	//PF("%d\n",sz);
	a=NULL;g=0;
	if (GOBBLERSZ > 0) {
		for(i=0;i<GOBBLERSZ;i++) {
			/*
			if(DEBUG && MEM_W &&
				 MEM_RECENT[i]!=0) {
				printf("%d. %d\n", i, (VP)MEM_RECENT[i]->sz);
			}
			*/
			if(MEM_RECENT[i]!=0 && 
				 (VP)MEM_RECENT[i]->sz > sz &&
				 (VP)MEM_RECENT[i]->sz < (sz * 5)) {
				a=MEM_RECENT[i];
				MEM_RECENT[i]=0;
				MEM_GOBBLES++;
				g=i;
				memset(BUF(a),0,a->sz);
				break;
			}
		}
	} 
	if(a==NULL)
		a = calloc(sizeof(struct V)+sz,1);
	if (MEM_W) {
		MEMPF("%salloc %d %p %d (%d * %d) (total=%d, freed=%d, bal=%d)\n",(g==1?"GOBBLED! ":""),t,a,sizeof(struct V)+sz,initn,itemsz,MEM_ALLOC_SZ,MEM_FREED_SZ,MEM_ALLOC_SZ-MEM_FREED_SZ);
		MEM_ALLOC_SZ += sizeof(struct V)+sz;
		MEM_ALLOCS++;
		for(i=0;i<N_MEM_PTRS;i++) {
			if (MEM_PTRS[i]==0)
				MEM_PTRS[i]=a;
		}
	}
	a->t=t;a->tag=0;a->n=0;a->rc=1;a->cap=initn;a->sz=sz;a->itemsz=itemsz;
	return a;
}
VP xprofile_start() {
	MEM_W=1;
}
VP xprofile_end() {
	int i;
	VP ctx;
	VP res; 
	MEM_W=0;
	printf("allocs: %d (%d), gobbles: %d, reallocs: %d, frees: %d\n", MEM_ALLOC_SZ, MEM_ALLOCS, MEM_GOBBLES, MEM_REALLOCS, MEM_FREES);
	for(i=0;i<N_MEM_PTRS;i++)
		if(MEM_PTRS[i]!=0) {
			xfree(MEM_PTRS[i]);
			MEM_PTRS[i]=0;
		}
	
	// 0..999:        4953
	// 1000..1999:    24
	// 2000..2999:    293
	// 3000..3999:    100
	//
	// count each group 1000 xbar capacity each MEM_PTRS
	/*
	xxl(
		(ctx,"sizes",xxl(MEMPTRS,x2(&map),x1(&capacity),x2(&map),x2(&xbar),xi(1000),0))
	*/
}
VP xrealloc(VP x,I32 newn) {
	// PF("xrealloc %p %d\n",x,newn);
	if(newn>x->cap) {
		buf_t newp; I32 newsz;
		newn = (newn < 10*1024) ? newn * 4 : newn * 1.25;
		newsz = newn * x->itemsz;
		if(x->alloc) {
			// PF("realloc %p %d %d %d\n", x->dyn, x->sz, newn, newsz);
			newp = realloc(x->dyn, newsz);
		} else {
			// PF("calloc %d %d %d\n", x->sz, newn, newsz);
			newp = calloc(newsz,1);
			memmove(newp,BUF(x),x->sz);
		}
		if(MEM_W) {
			MEMPF("realloc %d %p -> %d\n", x->t, x, newsz);
			MEM_ALLOC_SZ += newsz;
			MEM_REALLOCS++;
		}
		// PF("realloc new ptr = %p\n", newp);
		if(newp==NULL) perror("realloc");
		x->dyn=newp;
		x->cap=newn;
		x->sz=newsz;
		x->alloc=1;
		// PF("post realloc\n"); DUMP(x);
	}
	return x;
}
VP xfree(VP x) {
	int i;
	if(x==NULL)return x;
	//PF("xfree(%p)\n",x);
	//printf("
	x->rc--; 
	if(x->rc==0){
		if(LISTDICT(x))
			ITERV(x,xfree(ELl(x,_i)));
		if(MEM_W) {
			MEM_FREED_SZ+=sizeof(struct V) + x->sz;
			MEM_FREES+=1;
			MEMPF("free %d %p %d (%d * %d) (total=%d, freed=%d, bal=%d)\n",x->t,x,x->sz,x->itemsz,x->cap,MEM_ALLOC_SZ,MEM_FREED_SZ,MEM_ALLOC_SZ-MEM_FREED_SZ);
		}
		if (GOBBLERSZ > 0) {
			for(i=0;i<GOBBLERSZ;i++)
				if(MEM_RECENT[i]==0) {
					MEM_RECENT[i]=x;
					return x;
				}
		}
		free(x);
		//PF("free%p\n",x);free(x);
	} return x; }
VP xref(VP x) { if(MEM_W){MEMPF("ref %p\n",x);} x->rc++; return x; }
VP xfroms(const char* str) {  // character value from string - strlen helper
	size_t len = strlen(str)+1; type_info_t t = typechar('c');
	VP a = xalloc(t.t,len); memcpy(BUF(a),str,len); a->n=len; return a; }
const char* sfromx(VP x) { 
	if(x==NULL)return "null";
	return BUF(x); }
VP appendbuf(VP x,buf_t buf,size_t nelem) {
	int newn;buf_t dest;
	newn = x->n+nelem;
	x=xrealloc(x,newn);
	dest = ELi(x,x->n);
	memmove(dest,buf,x->itemsz * nelem);
	x->n=newn;
	return x;
}
VP append(VP x,VP y) { // append all items of y to x. if x is a general list, append pointer to y, and increase refcount.
	// PF("append %p %p\n",x,y); DUMP(x); DUMP(y);
	ASSERT(LISTDICT(x) || (x->t==y->t), "append(): x must be list, or types must match");
	if(IS_d(x)) {
		ASSERT(y->n % 2 == 0, "append to a dict with [`key;`value]");
		VP k=KEYS(x),v=VALS(x),y1,y2; int i;
		y1=ELl(y,0);
		y2=ELl(y,1);
		// tough decisions
		if(k==NULL) { // create dict
			if(0 && SCALAR(y1)) {
				k=xalloc(y1->t, 4);
			} else {
				k=xl0();
			}
			v=xl0();
			xref(k);xref(v);
			EL(x,VP,0)=k;
			EL(x,VP,1)=v;
			// PF("dict kv %p %p\n", k, v);
			DUMP(k);
			PF("NEW DICT VALUES\n");
			DUMP(v);
			i=-1;
		} else 
			i=_find(k,y1);
		if(i==-1) {
			xref(y1);xref(y2);
			EL(x,VP,0)=append(k,y1);
			EL(x,VP,1)=append(v,y2);
		} else {
			xref(y2);
			ELl(v,i)=y2;
		}
		return x;
	}
	if(LIST(x)) { 
		// PF("append %p to list %p\n", y, x); DUMP(x);
		x=xrealloc(x,x->n++);
		xref(y);
		EL(x,VP,x->n-1)=y;
		// PF("afterward:\n"); DUMP(x);
	} else {
		buf_t dest;
		dest = BUF(x) + (x->n*x->itemsz);
		x=xrealloc(x,x->n + y->n);
		memmove(ELsz(x,x->itemsz,x->n),BUF(y),y->sz);
		x->n+=y->n;
	}
	return x;
}
VP appendfree(VP x,VP y) {
	append(x,y); xfree(y); return x;
}
VP upsert(VP x,VP y) {
	if(_find(x,y)==-1) append(x,y); return x;
}
int _upsertidx(VP x,VP y) {
	int idx = _find(x,y);
	if(idx>-1) return idx;
	append(x,y); return x->n-1;
}
inline VP assign(VP x,VP k,VP val) {
	if(DICT(x)) {
		return append(x,xln(2,k,val));
	}
	ASSERT(1,"assign() bad types");
}
inline VP assigns(VP x,const char* key,VP val) {
	return assign(x,xfroms(key),val);
}
VP flatten(VP x) {
	int i,t=-1;VP res;
	if(!LIST(x))return x;
	if(x->n) {
		t=ELl(x,0)->t;
		res=xalloc(t,x->n);
		for(i=0;i<x->n;i++) {
			if(ELl(x,i)->t!=t) {
				xfree(res); return x;
			} else
				append(res,ELl(x,i));
		}
	}
	return res;
}
VP slice_(VP x,int i) {
	VP res = xalloc(x->t,x->n-i);
	memcpy(ELi(res,0),ELi(x,i),i*x->itemsz);
	return res;
}
VP replaceleft(VP x,int n,VP replace) { // replace first i values with just 'replace'
	int i;
	ASSERT(LIST(x),"replaceleft arg must be list");
	for(i=0;i<n;i++) xfree(ELl(x,i));
	if(n>1) {
		memmove(ELi(x,1),ELi(x,n),x->itemsz*(x->n-n));
	}
	EL(x,VP,0)=replace;
	x->n=x->n-i;
	return x;
}
inline int _equalm(VP x,int xi,VP y,int yi) {
	// PF("comparing %p to %p\n", ELi(x,xi), ELi(y,yi));
	// PF("_equalm\n"); DUMP(x); DUMP(y);
	if(ENLISTED(x)) { PF("equalm descend x");
		return _equalm(ELl(x,xi),0,y,yi);
	}
	if(ENLISTED(y)) { PF("equalm descend y");
		return _equalm(x,xi,ELl(y,yi),0);
	}
	if(memcmp(ELi(x,xi),ELi(y,yi),x->itemsz)==0) return 1;
	else return 0;
}	
int _equal(VP x,VP y) {
	/*
	 * PF("_equal");
	DUMP(x);
	DUMP(y);
	*/
	if(LIST(x) && SCALAR(x))  // if the list is a container for one item, we probably want to match the inner one
		return _equal(ELl(x,0),y);
	if(x->n != y->n) return 0; // XXX handle comparison tolerance and type conversion
	if(LIST(x) && LIST(y)) { ITERV(x,{ IFR(_equal(ELl(x,_i),ELl(y,_i))==0, 0); }); }
	ITERV(x,{ IFR(memcmp(ELb(x,_i),ELb(y,_i),x->itemsz)!=0,0); });
	return 1;
}
int _findbuf(VP x,buf_t y) {
	if(LISTDICT(x)) { ITERV(x,{ 
		IFR(_findbuf(ELl(x,_i),y)!=-1,_i);
	}); } else {
		ITERV(x,{ IFR(memcmp(ELi(x,_i),y,x->itemsz)==0,_i); });
	}
	return -1;
}
int _find(VP x,VP y) {
	ASSERT(LIST(x) || (x->t==y->t && y->n==1), "_find(): x must be list, or types must match with right scalar");
	/*
	 * PF("find %p %p\n",x,y);
	DUMP(x); DUMP(y);*/
	if(LISTDICT(x)) { ITERV(x,{ 
		VP xx;
		xx=ELl(x,_i);
		if(xx!=NULL) 
			IFR(_equal(xx,y)==1,_i);
	}); }
	else {
		ITERV(x,{ IFR(memcmp(ELi(x,_i),ELi(y,0),x->itemsz)==0,_i); });
	}
	return -1;
}
VP find(VP x,VP y) {
	return xi(_find(x,y));
}
int _contains(VP x,VP y) {
	return _find(x,y)==-1 ? 0 : 1;
}
VP contains(VP x,VP y) {
	return xi(_contains(x,y));
}
inline VP times(VP x,VP y) {
	VP r = xalloc(x->t, x->n);
	ITER2(x,y,{ append(r,xi(_x*_y)); });
	return r;
}
inline VP each(VP verb,VP noun) {

}
char* repr0(VP x,char* s,size_t sz) {
	type_info_t t;
	if(x==NULL) { APF(sz,"[null]",0); return s; }
	t=typeinfo(x->t);
	APF(sz,"[%p %s tag=%d#%s itemsz=%d n=%d rc=%d] ",x,t.name,
		x->tag,(x->tag!=0 ? sfromx(tagname(x->tag)) : ""),
		x->itemsz,x->n,x->rc);
	if(t.repr) (*(t.repr)(x,s,sz));
	return s;
}
char* reprA(VP x) {
	#define BS 1024
	char* s = calloc(1,BS);
	s = repr0(x,s,BS);
	APF(BS,"\n",0);
	return s;
}

// RUNTIME!!

VP len(VP x) {
	return xin(1,x->n);
}
VP capacity(VP x) {
	return xin(1,x->cap);
}
VP itemsz(VP x) {
	return xin(1,x->itemsz);
}
VP til(VP x) {
	VP acc;int i;
	PF("TIL!!!!\n");
	DUMP(x);
	ASSERT(IS_i(x),"til: arg must be int");
	acc = xisz(AS_i(x,0));
	for(i=0;i<AS_i(x,0);i++) {
		EL(acc,int,i)=i;
	}
	acc->n=i;
	DUMP(acc);
	return acc;
}
VP plus(VP x,VP y) {
}
VP sum(VP x) {
	PF("sum");DUMP(x);
	I128 val=0;int i;
	if(!IS_i(x)) EXC(Tt(type),"sum argument should be numeric",x,0);
	for(i=0;i<x->n;i++) val+=AS_i(x,i);
	return xo(val);
}
VP labelitems(VP label,VP items) {
	VP res;
	PF("labelitems\n");DUMP(label);DUMP(items);
	res=flatten(items);res->tag=_tagnums(sfromx(label));
	DUMP(res);
	return res;
}
VP mkproj(int type, void* func, VP left, VP right) {
	Proj p;
	VP pv=xpsz(1);
	p.type=type;
	if(type==1) {
		p.f1=func;
		p.left=left;
		p.right=0;
	} else {
		p.f2=func;
		p.left=left;
		p.right=right;
	}
	EL(pv,Proj,0)=p;
	pv->n=1;
	return pv;
}
VP apply(VP x,VP y) {
	VP res=NULL;int i;
	PF("apply\n");
	DUMP(x);
	DUMP(y);
	if(DICT(x)) {
		VP k=KEYS(x),v=VALS(x);I8 found;
		if(k==NULL || v==NULL) return NULL;
		res=xi0();
		if(IS_x(y)) {
			loopy:
			ITERV(y,{
				res=match(ELl(y,_i),k);
				PF("context match\n");DUMP(res);
				if(res->n) {
					VP rep;
					rep=ELl(v,_i);
					if(IS_1(rep) || IS_2(rep))
						rep=apply(rep,apply(y,res));
					y=replaceleft(y,res->n,rep);
				}
			});
		} else {
			ITERV(y,{ 
				int idx;
				PF("searching %d\n",_i);
				if(LIST(y)) idx = _find(k,ELl(y,_i));
				else idx = _findbuf(k,ELi(y,_i));
				if(idx>-1) {
					found=1;
					PF("found at idx %d\n", idx); append(res,xi(idx));
				}
			});
		}
		if(res->n==0) {
			if(x->next!=0) {
				res=apply(x->next, res);
			}
		}
		if(res->n==0)
			return xl0();
		else
			return apply(v,res);
	}
	if(IS_p(x)) { 
		// if its dyadic
		   // if we have one arg, add y, and call - return result
			 // if we have no args, set y as left, and return x
		// if its monadic
			// if we have one arg already, call x[left], and then apply result with y
			// i think this is right..
		Proj* p;
		p=ELi(x,0);
		if(!p->left)
			p->left=y;
		else if (!p->right)
			p->right=y;
		if(p->type==1 && p->left) {
			return (*p->f1)(p->left);
		}
		if(p->type==2 && p->left && p->right) {
			return (*p->f2)(p->left,p->right);
		}
	}
	if(IS_1(x)) {
		unaryFunc* f; f=AS_1(x,0); return (*f)(y);
	}
	if(IS_2(x)) {
		return mkproj(2,AS_2(x,0),y,0);
	}
	if(IS_i(y)) {
		// index a value with an integer 
		if(y->n==1 && LIST(x)) {
			// special case for generic lists:
			// if you index with one item, return just that item
			// generally you would receive a list back
			// this may potentially become painful later on 
			i = AS_i(y,0); VP tmp = ELl(x,i); xref(tmp); return tmp;
		} else {
			res=xalloc(x->t,y->n);
			ITERV(y,{ 
				i=AS_i(y,_i); if(i < x->n) {
					appendbuf(res,ELi(x,i),1);
				} else { printf("out of bounds %d %d\n", i, x->n); }
			});
			return res;
		}
	}
}

// TAG STUFF:

VP tagwrap(VP tag,VP x) {
	return entag(xln(1, x),tag);
}
VP tagwraps(const char* name, VP x) {
	return entags(xln(1,x),name);
}
inline VP entag(VP x,VP t) {
	if(IS_c(t))
		x->tag=_tagnum(t);
	else if (IS_i(t))
		x->tag=AS_i(t,0);
	return x;
}
inline VP entags(VP x,const char* name) {
	x->tag=_tagnums(name);
	return x;
}
inline VP tagname(const I32 tag) {
	VP res;
	// PF("tagname(%d)\n", tag);
	// DUMP(TAGS);
	if(TAGS==NULL) { TAGS=xl0();TAGS->rc=INT_MAX; }
	if(tag>=TAGS->n) return xfroms("unknown");
	res = ELl(TAGS,tag);
	// PF("tagname res\n");
	// DUMP(res);
	return res;
}
const char* tagnames(const I32 tag) {
	return sfromx(tagname(tag));
}
inline int _tagnum(const VP s) {
	int i;
	if(TAGS==NULL) { TAGS=xl0();TAGS->rc=INT_MAX;upsert(TAGS,xfroms("")); PF("new tags\n"); DUMP(TAGS); }
	i=_upsertidx(TAGS,s);
	// PF("tagnum %s -> %d\n",name,i);
	// DUMP(TAGS);
	return i;
}
int _tagnums(const char* name) {
	int t;VP s;
	s=xfroms(name);
	t=_tagnum(s);
	xfree(s);
	return t;
}
VP match(VP obj,VP pat) { // TODO should be const
	int anyof, exact, greedy;
	int i, j, matchtag, found, mtype, pati, obji;
	VP acc,tmp,oo,pp;
	anyof=_tagnums("anyof"); exact=_tagnums("exact"); greedy=_tagnums("greedy");

	mtype=pat->tag;
	matchtag=0;
	PF("mtype = %d %s\n",mtype,tagnames(mtype));
	PF("match %d %d\n", obj->n, pat->n);
	DUMP(obj);
	DUMP(pat);
	if(pat->tag) mtype=pat->tag;
	if(ENLISTED(pat)) { 
		PF("breaking out enlisted pat");
		pat=ELl(pat,0);
		if(pat->tag) {
			PF("grabbed tag");
			matchtag=pat->tag;
		}
	}
	if(mtype==exact &&
		 pat->n!=obj->n)
		return xi0();
	if(matchtag!=0 && obj->tag!=matchtag) {
		PF("tag mismatch (%d vs %d - bombing)\n", matchtag, obj->tag);
		return xi0();
	}
	acc = xi0();
	pati = 0; obji = 0;
	while(pati < pat->n && obji < obj->n) {
		found=0;
		PF("%s inner loop pat %d of %d, obj %d of %d\n", tagnames(mtype), pati, pat->n, obji, obj->n);
		//DUMP(obj);DUMP(pat);
		if(LIST(obj) && LIST(pat)) {
			oo=ELl(obj,obji);
			pp=ELl(pat,pati);
			if(LIST(pp)&&LIST(obj)) {
				PF("doing submatch\n");
				tmp=match(ELl(obj,obji),ELl(pat,pati));
				if(tmp->n>0) { found=1; appendbuf(acc,(buf_t)&obji,1); }
			};
		} else {
			PF("doing raw equalm\n");
			if(_equalm(pat,pati,obj,obji)) {
				PF("items appear to match %d %d\n", pati, obji);
				found=1; appendbuf(acc,(buf_t)&obji,1);
			}
		}
		done:
		PF("found = %d\n", found);
		if (found) {
			obji++;
			if (mtype==greedy) 
				;
			else
				pati++;
		}
		if (!found) {
			if (mtype==anyof) {
				obji++;
				pati++;
				if (pati==pat->n-1)
					pati=0;
			} else {
				obji++;
			}

			// pati++;
		}
	}
	PF("final pati %d obji %d\n", pati, obji);
	DUMP(acc);
	return acc;
}
VP matchexec(VP obj,const VP pats) {
	int i,j;VP res,res2,sel;
	ASSERT(LIST(pats)&&pats->n%2==0,"pats should be a list of [pat1,fn1,pat2,fn2..]");
	PF("matchexec\n");
	DUMP(obj);
	DUMP(pats);
	for(i=0;i<pats->n;i+=2) {
		PF("matchexec %d\n", i);
		res=match(obj,ELl(pats,i));
		PF("matchexec match\n");
		DUMP(res);
		if(res->n) {
			res2=apply(ELl(pats,i+1),apply(obj,res));
			obj=replaceleft(obj,res->n,res2);
		}
	}		
	return obj;
}
VP eval0(VP ctx,VP code,int level) {
	int i,j; 
	VP k,v,cc,kk,vv,matchres,sel,rep;
	PF("eval0 level %d\n",level);
	DUMP(ctx);
	DUMP(code);
	ASSERT(LIST(code),"eval0 list for now");
	k=KEYS(ctx);v=VALS(ctx);
	ASSERT(k!=NULL&&v!=NULL,"eval0: empty ctx");

	for(i=0;i<code->n;i++) { // XXX use wrapper function for descent 
		cc=ELl(code,i);
		if (LIST(cc)) 
			eval0(ctx,cc,level+1);
		// try to match each key in ctx
		for (j=0;j<k->n;j++) {
			kk = ELl(k,j);
			PF("eval0 inner %p\n", kk);DUMP(kk);
			matchres = match(cc,kk);
			if(matchres->n==kk->n) {
				PF("got match\n");DUMP(kk);
				sel = apply(cc,matchres);
				PF("sel\n");DUMP(sel);
				vv=ELl(v,j);
				if(IS_1(vv)) 
					rep=apply(vv,ELl(sel,1));
				PF("rep\n");DUMP(rep);
				EL(code,VP,i)=rep;
			}
		}
	}
	return code;
}
VP mklexer(const char* chars, const char* label) {
	VP res = xlsz(2);
	return xln(2,
		entags(xln(1,
			entags(xln(1,entags(xfroms(chars),"anyof")),"raw")
		),"greedy"),
		mkproj(2,&labelitems,xfroms(label),0)
	);
}
VP mkint(VP x) {
	PF("mkname\n");DUMP(x);
	return entags(flatten(x),"name");
}
VP mkname(VP x) {
	PF("mkname\n");DUMP(x);
	return entags(flatten(x),"name");
}
VP mkcomment(VP x) {
	return entags(flatten(x),"comment");
}
VP mkstr(VP x) {
	return entags(flatten(x),"string");
}

// CONTEXTS:

VP mkctx() {
}
VP ctx_resolve(VP ctx) {

}
VP eval(VP code) {
	VP ctx = xd0();VP tmp;
	ASSERT(LIST(code),"eval(): code must be list");
	tmp=xl0();
	tmp=append(tmp,xt(_tagnums("til")));
	tmp=append(tmp,xi0());
	ASSERT(tmp->n==2,"eval tmp n");
	ctx=append(ctx,xln(2, tmp, x1(&til) ));
	tmp=xl0();
	tmp=append(tmp,xi0());
	tmp=append(tmp,xt(_tagnums("+")));
	tmp=append(tmp,xi0());
	ctx=append(ctx,xln(2, tmp, x2(&plus) ));
	return eval0(ctx,code,0);
}
VP evalstr(const char* str) {
	VP lex,pats,acc,t1;size_t l=strlen(str);int i;
	str=" 123";
	acc=xlsz(l);
	for(i=0;i<l;i++)
		append(acc,entags(xc(str[i]),"raw"));
	DUMP(acc);
	pats=xl0();
	/* identifiers */
	/*
	append(pats,entags(
		xln(1,
			entags(xfroms("abcdefghjijklmnoprstuvwxyz"),"anyof")
		),"greedy"));
	append(pats,x1(&mkname));
	*/
	/*
	 * lex=mklexer("abcdefghijklmnopqrstuvwxyz","name");
	append(pats,ELl(lex,0));
	append(pats,ELl(lex,1));
	xfree(lex);
	*/
	lex=mklexer(" \n\t\r","ws");
	append(pats,ELl(lex,0));
	append(pats,ELl(lex,1));
	xfree(lex);
	lex=mklexer("0123456789","int");
	append(pats,ELl(lex,0));
	append(pats,ELl(lex,1));
	xfree(lex);
	t1=matchexec(acc,pats);
	PF("evalstr result\n");
	DUMP(t1);
	exit(1);
}
void test_basics() {
	#include "test-basics.h"
}
void test_proj() {
	VP a,b,c,n;
	n=xi(1024*1024);
	//a=mkproj(1,&til,n,0);
	a=x1(&til);
	b=apply(a,n);
	PF("b\n");DUMP(b);
	c=apply(mkproj(1,&sum,b,0),0);
	PF("result\n");DUMP(c);
	//printf("%lld\n", AS_o(c,0));
	xfree(a);xfree(b);xfree(c);xfree(n);
	//DUMP(c);
}
void test_context() {
	VP a,b,c;
	a=xd0();
	assigns(a,"til",x1(&til));
	assign(a,tagwraps("greedy",xln(3,xfroms("\""),xc0(),xfroms("\""))),x1(&mkstr));
	b=xxn(7,xfroms("\""),xfroms("a"),xfroms("b"),xfroms("c"),xfroms("\""),xfroms("til"),xfroms("1024"));
	c=apply(a,b);
	DUMP(a);
	DUMP(b);
}
void test_match() {
	VP a,b,res;

	ASSERT(_equal(match(xin(4,1,2,3,4),xin(4,1,2,3,4)),xin(4,0,1,2,3)),"m0");
	ASSERT(_equal(match(xin(4,1,2,3,4),xin(2,1,2)),    xin(2,0,1)),"m1");
	ASSERT(_equal(match(xin(4,1,2,3,4),xin(1,1)),      xin(1,0)),"m2");
	ASSERT(_equal(match(xin(4,1,2,3,4),xin(1,2)),      xin(1,1)),"m3");
	ASSERT(_equal(match(xin(4,1,2,3,4),xin(2,2,3)),    xin(2,1,2)),"m4");

	ASSERT(_equal(match(xln(1,xi(9)),xin(2,9,8)),      xin(1,0)),"ml0");
	ASSERT(_equal(match(xln(2,xi(9),xi(8)),xin(2,9,8)),xin(2,0,1)),"ml1");

	ASSERT(_equal(
		match(
			a=xin(4,1,2,3,4),
			b=tagwraps("anyof",xin(4,5,6,7,8))
		), res=xi0()), "m5");
	xfree(a);xfree(b);xfree(res);

	ASSERT(_equal(
		match(
			a=xin(5,1,2,3,4,5),
			b=tagwraps("anyof",xin(3,5,6,7))
		), res=xin(1,4)), "m6");
	ASSERT(_equal(
		match(
			xin(5,5,8,7,6,4),
			tagwraps("anyof",xin(4,9,8,7,6))
		), xin(3,1,2,3)), "m7");
	ASSERT(_equal(
		match(
			xin(5,5,8,7,6,4),
			tagwraps("anyof",xin(3,1,1,1))
		), xi0()), "m7");
	ASSERT(_equal(
		apply(xin(5,5,8,7,6,4), match(
			xin(5,5,8,7,6,4),
			tagwraps("anyof",xin(4,9,8,7,6))
		)), xin(3,8,7,6)), "m8");

	ASSERT(_equal(
		match(xin(5,1,2,3,4,1),
			tagwraps("greedy",
				xln(3, xi(1), tagwraps("anyof",xin(3,2,3,4)), xi(1))
			)), xin(5,0,1,2,3,4)), "m9");

	ASSERT(_equal(
		match(
			xln(3,xfroms("\""),xfroms("blah"),xfroms("\"")),
			tagwraps("greedy",
				xln(3,xfroms("\""),xc0(),xfroms("\"")))
		),xin(3,0,1,2)), "m10");

	printf("BIG ONE\n\n\n\n");
	ASSERT(_equal(
		match(
			xln(4,xi(100),xfroms("\""),xfroms("blah"),xfroms("\"")),
			tagwraps("greedy",
				xln(3,xfroms("\""),xc0(),xfroms("\"")))
		),xin(3,1,2,3)), "m11");
	/*
	a=xin(4, 1, 2, 3, 4);
	b=xin(4, 1, 2, 3, 4);
	res=match(a,b);
	DUMP(res);
	ASSERT(res->n==4 && AS_i(res,0) == 0 && AS_i(res,3)==3, "match 0");
	xfree(res); xfree(a); xfree(b);

	a=xin(4, 1, 2, 3, 4);
	b=xin(2, 1, 2);
	res=match(a,b);
	DUMP(res);
	ASSERT(res->n==2 && AS_i(res,0) == 0 && AS_i(res,1)==1, "match 1");
	xfree(res); xfree(a); xfree(b);

	a=xin(4, 1, 2, 3, 4);
	b=xin(2, 2, 3);
	res=match(a,b);
	DUMP(res);
	*/

}
void test_eval() {
	/*
	VP code,tmp1,tmp2,tmp3;
	PF("test_eval\n");
	code=entags(xl0(),"code");
	ASSERT(code->tag==_tagnums("code"),"entags 1");
	tmp1=xln(2,
		xt(_tagnums("til")),
		xi(100)
	);
	tmp1->tag=_tagnums("value");
	append(code,tmp1);
	eval(code);
	*/
	evalstr("til 1024");
}
void tests() {
	int i;
	xprofile_start();
	test_basics();
	test_match();
	test_context();
	xprofile_end();
	exit(1);
	for(i=0;i<1024*1024;i++) {
		xprofile_start();
		test_match();
	}
	exit(1);
	if (DEBUG) xprofile_start();
	for(i=0;i<1024;i++) {
		test_proj();
	}
	if (DEBUG) xprofile_end();
	exit(1);
	test_eval();
	if(MEM_W) {
		PF("alloced = %llu, freed = %llu\n", MEM_ALLOC_SZ, MEM_FREED_SZ);
	}
}
int main(void) {
	VP code;
	tests();
}
/*
*/ 
