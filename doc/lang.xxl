'lists,'values,'logic,'math,'misc,'stdlib as 'categories;

// LISTS MANIPULATION
['t:'unary,
 'name:"flat",
 'op:"",
 'cat:'lists,
 'desc:"attempt to remove one level of nesting of x; may return general list if not possible to fuse general list into vector",
 'ex:[
  ["[1,2,[3,4,5]] flat",(1,2,3,4,5)],
  ["[1,2,[3,4,'z]] flat",[[1, 2], [3, 4, 'z]]]
 ],
 'cat:'lists
]$'table,
['t:'binary,
 'name:"join",
 'op:"|,",
 'desc:"join list x into new list (or vector, if all types match) with pieces joined together by y",
 'ex:[ 
  ["1,2,3 join 0",(1,0,2,0,3)],
  ["[\"m\",\"ss\",\"ss\",\"pp\",\"\"] join \"i\"",["mississippi"]]
 ],
 'cat:'lists
],
['t:'binary,
 'name:"split",
 'op:"||",
 'desc:"splits x into a list of pieces delimited by y.",
 'ex:[ ["1,7,2,7,3 split 7",[1,2,3]] ],
 'cat:'lists
],
// VALUE MANIPULATION (and usually lists too)
['t:'unary, 
 'name:"behead", 
 'desc:"return x without its first element", 
 'ex:[["2,3,4 behead",(3,4)]], 
 'cat:'values],
['t:'unary, 
 'name:"curtail", 
 'desc:"return x without its last element. cute name amirite?", 
 'ex:[["2,3,4 curtail",(2,3)]], 
 'cat:'values],
['t:'binary,
 'name:"take",
 'op:"#|",
 'desc:"takes the first y pieces of x (which can be a vector or a list). use a negative value in y to take from the end of the list",
 'ex:[
  ["1,7,2,7,3 take 2",(1,7)],
  ["1,7,2,7,3 take (2neg)",(7,3)]
 ],
 'cat:'values
],
['t:'binary,
 'name:"drop",
 'op:"|#",
 'desc:"removes the first y pieces of x (which can be a vector or a list). use a negative value in y to drop from the end of the list",
 'ex:[
  ["1,7,2,7,3 drop 2",(2,7,3)],
  ["1,7,2,7,3 drop (2neg)",(1,7,2)]
 ],
 'cat:'values
],
['t:'binary,
 'name:"except",
 'op:"|?",
 'desc:"remove items in x that are present in y",
 'ex:[
  ["1,7,2,7,3 except 7",(1,2,3)],
  ["1,7,2,7,3 except (7,1,8)",(2,3)]
 ],
 'cat:'values
],
// LOGIC
['t:'binary,
 'name:"case",
 'op:"",
 'desc:"tests x against pairs of conditions in y and returns them (or, if callable, executes and returns them) if they match. 
 
 y should be a list or vector of the form (test1, result1, test2, result2, else?). 
 the last item may be an else result. it will be invoked/returned if nothing else matches
 if provided, but you may omit it, in which case the value of x is returned unchanged.

 Returns after first match.",
 'ex:[
  ["1 case [1,7,2,6,8]",1],
  ["2 case [1,7,2,6,8]",6],
  ["3 case [1,7,2,6,8]",8],
  ["3 case [1,7,2,6]",3]
 ],
 'cat:'logic
],
['t:'binary, 'name:"iftrue", 
 'desc:"returns y if x is truthy. if y is callable, y will be invoked with x as an argument.", 
 'ex:[["0 iftrue 2",0],["1 iftrue 2",2]],
 'cat:'logic],
['t:'binary, 'name:"orelse", 
 'desc:"returns y if x is falsy. if y is callable, y will be invoked with x as an argument.", 
 'ex:[["0 orelse 2",2],["1 orelse 2",1]],
 'cat:'logic],
['t:'binary, 'name:"ifelse", 
 'desc:"returns y[0] if x is truthy or y[1] otherwise. if y is callable it will be invoked with x as an argument.",
 'ex:[["0 ifelse (3,4)",4],["1 ifelse (3,4)",3]],
 'cat:'logic],
['t:'binary, 
 'name:"or", 
 'desc:"if x or y is empty, null, or an exception, returns the other (y or x). 
 
 if x and y are dictionaries: returns the union of those dictionaries.
	 
 for same-sized vectors: returns a vector composed of the higher element of each (x,y) pair. this can
 be used as \"max\" of two vectors.

", 'ex:[
	["() or 0",0]
], 'cat:'misc],
// LOOPING
['t:'binary,
 'name:"each",
 'op:"::",
 'desc:"perform y for every item in x and return result as same type as x (or a general list if not possible)",
 'ex:[
  ["1,7,2,7,3 each {*2}",(2,14,4,14,6)]
 ],
 'cat:'looping
],
// MISC
['t:'unary, 
 'name:"parse", 
 'desc:"return the XXL parse string for string x", 
 'ex:[
	["\"[1,(2,3)]*z\" parse",
	 "['listexpr([[], 'raw(\",\"), 1i, 'raw(\",\"), 'expr([2i, 'raw(\",\"), 3i])]), 'raw(\"*\"), 'name(\"z\"), 'ws(\"\n\")]"
  ]
 ], 
 'cat:'misc],
//
['t:'unary,
 'name:"show",
 'op:"",
 'desc:"display the value on the user's screen (depending on how the XXL program is being run) and return
 that value so it can be used in the rest of the expression.",
 'ex:[ ["1,2,3 show","1,2,3"] ],
 'cat:'misc
],
// SYSTEM
['t:'unary,
 'name:"sys",
 'op:"",
 'desc:"retrieve information about the current XXL environment by passing [] as x",
 'ex:[
   ["[]sys",('ver:"v0",'srcpath:"/tmp/xxl")]
 ],
 'cat:'system
],
// TODO
['t:'unary, 'name:"any", 'desc:"
returns 1 if any of the elements of x 
are nonzero", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"arity", 
'desc:"returns 1 for unary functions and
2 for binary functions. Useful for user defined 
functions", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"condense", 'desc:"
Repeats each item of x the number of times that the 
value contains. Not ", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"count", 'desc:"
Returns a vector of the integers between 0
and x-1", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"clone", 'desc:"
Creates a copy of x", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"curtail", 'desc:"", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"info", 'desc:"
Returns a dictionary of information about x", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"first", 'desc:"
Returns first item of x", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"last", 'desc:"
Returns last item of x", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"list", 'desc:"
Converts vector x into a general list", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"len", 'desc:"
Returns length of list or vector x", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"key", 'desc:"
Returns the keys/columns of dictionary/table x", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"min", 'desc:"
Returns the minimum value in vector x", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"max", 'desc:"", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"neg", 'desc:"
Reverse the sign of all elements in x", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"not", 'desc:"", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"repr", 'desc:"return a text representation of x. This is usually close to what you'd type in to XXL to create that value", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"rev", 'desc:"
Returns vector x in reverse order", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"selftest", 'desc:"", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"str", 'desc:"return string representation of x. Compared to the repr verb this is usually a simpler version of the value", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"sum", 'desc:"", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"sums", 'desc:"", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"tag", 'desc:"", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"type", 'desc:"", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"val", 'desc:"when x is a dict or table, return the values of x. Exception otherwise", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"vec", 'desc:"", 'ex:[], 'cat:'misc],
['t:'unary, 'name:"xray", 'desc:"", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"::", 'desc:"", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"amend", 'desc:"", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"and", 'desc:"", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"aside", 'desc:"evaluate y but return x. This is useful in situations where you want to use the value of the expression you've built up, but don't want to interrupt that expression", 'ex:[["fname .file.get aside {len show} parse",['parsetree]], 'cat:'misc],
['t:'binary, 'name:"base", 'desc:"", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"bracketj", 'desc:"", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"call", 'desc:"", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"consecj", 'desc:"", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"deal", 'desc:"create x random numbers from 0 to y", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"deep", 'desc:"invokes y for each nested list in x", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"eachl", 'desc:"", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"eachr", 'desc:"", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"evalin", 'desc:"", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"exhaust", 'desc:"apply y to x and then again to that result over and over again until it returns x or the same thing twice. Returns the last result.", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"get", 'desc:"", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"in", 'desc:"", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"loadin", 'desc:"", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"make", 'desc:"transforms x into typed denoted by tag in y (such as float)", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"nest", 'desc:"", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"pick", 'desc:"returns items of x which correspond to indices of y containing 1", 'ex:[["1,2,3 as 'z pick (z~2 not )",(1,3)]], 'cat:'misc],
['t:'binary, 'name:"over", 'desc:"", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"range", 'desc:"returns a vector comprised of x .. y inclusive", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"recurse", 'desc:"call y on x, and then again on the result of that, collecting all intermediate results in a list, until it returns x again or the same thing twice. Similar to exhaust, but returns all results along the way, rather than the last one", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"rot", 'desc:"rotate the contents of the vector x right by y positions. y may be negative", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"scan", 'desc:"", 'ex:[], 'cat:'misc],
['t:'binary, 'name:"wide", 'desc:"invoke y for each item in list x, and then again for each member of the result that's a list, and so on. This is similar to a breadth first search of a tree. ", 'ex:[], 'cat:'misc]
as 'verbs
